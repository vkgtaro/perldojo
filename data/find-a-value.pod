=encoding utf-8

=head1 QUESTION

あなたは配列の中にある値があるかどうかの真偽値を返す C<in($value, @array)> を実装することのしました。
あなたはこのサブルーチンを様々なところで使いたいので、一般的なものにしたいと考え幾つか実装してみました。以下のサブルーチンのうちB<間違っている>実装はどれでしょう。
なお、「ある値があるかどうか」を調べる比較演算子としてはスマートマッチ演算子C<~~>を使うものとします。

=head1 CHOICES

=over

=item 1.

    use List::Util qw(first);
    sub in {
        my $value = shift;
        return first { $_ ~~ $value } @_;
    }

=item 2.

    sub in {
        my $value = shift;
        return scalar grep { $_ ~~ $value } @_;
    }

=item 3.

    sub in {
        my $value = shift;
        foreach my $item(@_) {
            return 1 if $item ~~ $value;
        }
        return 0;
    }

=item 4.

    sub in {
        my $value = shift;
        return scalar map { $_ ~~ $value || () } @_;
    }

=back

=head1 ANSWER

1

=head1 EXPLANATION

1は C<List::Util::first()> を使っていますが、この関数はリストの中の特定の値そのものを返します。つまり、 C<in(0, ...)> や C<in(undef, ...)> として呼び出すと0とundefをそれぞれ返すため、真偽値としては偽になります。

4はわかりにくいのですが、 C<map> ブロックの評価値はリストコンテキストで評価されるので、値の数を増やしたり減らしたりできるのです。つまり C< map { expr || () } ... > は C<grep> と同じ意味になります。

ところで、Perl 5.10から導入されたスマートマッチ演算子は C<undef> かどうかを調べることもできます。スマートマッチ演算子の仕様は複雑ですが、スカラー値だけで考えると C<undef> を事前に検査しなくていい分 C<eq> よりも使い勝手がいいといえるでしょう。

=head1 AUTHOR

Fuji Goro
http://github.com/gfx

=cut
